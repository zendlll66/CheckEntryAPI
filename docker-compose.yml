services:
  node:
    build: ./node
    env_file:
      - ./node/.env
    expose:
      - "3000"
    # depends_on:
    #   - redis
    #   - rabbitmq
    environment:
      - NODE_ENV=production
    networks:
      - backend

  # worker:
  #   build: ./worker
  #   env_file:
  #     - ./node/.env
  #   depends_on:
  #     - redis
  #     - rabbitmq
  #   environment:
  #     - NODE_ENV=production
  #   networks:
  #     - backend

  # test:
  #   build: ./node
  #   container_name: node-test
  #   env_file:
  #     - ./node/.env.test   # ใช้ env แยก
  #   volumes:
  #     - ./node:/usr/src/app
  #   command: npm test
  #   depends_on:
  #     - mysql
  #     - redis
  #     - rabbitmq
  #   networks:
  #     - backend


  # redis:
  #   image: redis:alpine
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - backend

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   networks:
  #     - backend

  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    depends_on:
      - mysql
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      UPLOAD_LIMIT: 300M
    ports:
      - "9000:80"
    restart: unless-stopped
    networks:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "19000:80"
      - "19443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - node
    networks:
      - backend

  

networks:
  backend:

volumes:
  mysql_data: